#!/usr/bin/perl
#
# dropbox_monitor - report status of Dropbox service
#
# Jason White <jdwhite@menelos.com>
# 17-Jan-2014 (initial release)
#
=begin License

The MIT License (MIT)

Copyright (c) 2014 Jason White <jdwhite@menelos.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=end License
=cut

#
# Initial indentation of is done with tabs; successive alignment is done 
# with spaces. To format this code per your indentation preference, say, 
# 4 spaces per tab stop:
#       less -x4
#       nano -T4
#       vim (set tabstop=4 (also in .vimrc))
#       vi  (set ts=4 (also in .exrc))
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Install in $XYMONCLIENTHOME/client/ext/.
# Modify $XYMONCLIENTHOME/etc/clientlaunch.cfg and add this block:
#
#	# Dropbox Monitor
#	[dropboxmon]
#		ENABLED
#		ENVFILE $XYMONCLIENTHOME/etc/xymonclient.cfg
#		CMD $XYMONCLIENTHOME/ext/dropbox_monitor
#		LOGFILE $XYMONCLIENTHOME/logs/dropbox_monitor.log
#		INTERVAL 10m
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Jason White <jdwhite@menelos.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

use strict;
use warnings;

use LWP::UserAgent;

## Globals ##
$main::TESTNAME  = 'status';
$main::TESTCOLOR = "clear";	# uncertain by default
$main::DATA      = "";
$main::MACHINE   = "status,dropbox,com";	#What we report as.
$main::URL       = "http://status.dropbox.com";

#
# Fetch main page and process.
#
my($ua) = LWP::UserAgent->new;
my($req) = HTTP::Request->new(
	GET => $main::URL
);

# Pass request to the user agent and get a response.
my($resp) = $ua->request($req);

# Check the outcome of the response.
$main::HTML = "";
if ($resp->is_success) {
	$main::HTML = $resp->content;
}
else {
	print "Error reading $main::URL - ".$resp->status_line."\n";
	exit;
}

$main::HTML =~ /<h1>(Dropbox is (.+?))<\/h1>/iom;
$main::DATA .= $1;
$main::status = $2;

if ($main::status ne "running normally.") {
	$main::TESTCOLOR = "red";
}
else {
	$main::TESTCOLOR = "green";
}

$main::DATA .= " \&${main::TESTCOLOR}\n";

##
## Generate status report.
##

# STATUS - Canonical status of test and its lifetime: status[+LIFETIME]
#$STATUS = "status+25h ${main::MACHINE}.${main::TESTNAME} ${main::TESTCOLOR}";
$main::STATUS = "status ${main::MACHINE}.${main::TESTNAME} ${main::TESTCOLOR}";

# SUMMARY - datestamp and summary of the test.
$main::SUMMARY = scalar(localtime(time))." - ${main::TESTNAME}: $main::status";

# MESSAGE - status, summary, diagnostic data combined.
$main::MESSAGE = "${main::STATUS} ${main::SUMMARY}\n\n${main::DATA}";

##
## Send to Xymon or to stdout if run interactively.
##
if (defined($ENV{XYMON})) {
	# "at" sign as argument means "read message data from stdin".
	# DON'T USE A DASH AS THE xymon USAGE MESSAGE SHOWS ELSE ONLY
	# THE SUMMARY INFORMATION IS DISPLAYED AND NONE OF $main::DATA.
	# THE MANPAGE USAGE OF "@" IS CORRECT.
	open(XYMON, "| $ENV{XYMON} $ENV{XYMSRV} @") || do {
	print "Error invoking $ENV{XYMON} $ENV{XYMSRV} @ - $!";
		exit;
	};
	select(XYMON);
}
else {
	print STDERR "*** Not invoked by Xymon; sending to stdout ***\n\n";
}

print $main::MESSAGE;
close(XYMON);

exit;
