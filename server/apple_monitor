#!/usr/bin/perl
#
# apple_monitor - report status of Apple's services.
#
# Jason White <jdwhite@menelos.com>
# 8-Feb-2014
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Install in $XYMONCLIENTHOME/client/ext/.
# Modify $XYMONCLIENTHOME/etc/clientlaunch.cfg and add this block:
#
#   # Apple Monitor
#   [applemon]
#           ENABLED
#           ENVFILE $XYMONCLIENTHOME/etc/xymonclient.cfg
#           CMD $XYMONCLIENTHOME/ext/apple_monitor
#           LOGFILE $XYMONCLIENTHOME/logs/apple_monitor.log
#           INTERVAL 10m
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# The apple status page currently contains 45 Services. Since displaying
# all 45 columns in a single host woule be visually disturbing, I recommend
# placing this host on a separate 'vpage' so that the the tests are
# displayed vertically.
#
# I recommend using real, resolvable host name so that conn test works. This
# will keep Xymon from generating a ton of alerts in the event of transient
# network outages.
#
# hosts.cfg
# ---------
# vpage apple Apple Services
# 0.0.0.0         www.apple.com                   # conn NAME:"Apple Services"
#
=license
The MIT License (MIT)

Copyright (c) 2015 Jason White <jdwhite@menelos.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
=cut
#

use strict;
use warnings;
use Data::Dumper;
use LWP::UserAgent;
use Text::Wrap;
use JSON;
use English;

#
# == Initialize Xymon Namespace ==
# Call this to initialize the Xymon:: functions and variables.
&Xymon::init_xymon_namespace;

## Globals ##
# main::URL is for the reference on the status page.
$main::URL      = "http://www.apple.com/support/systemstatus/";
# Note: substitute the "en_US" suffix in URL_JSON to reflect your own locale.
$main::URL_JSON = "http://www.apple.com/support/systemstatus/data/system_status_en_US.js";

#
# Fetch JSON service log.
#
my($ua) = LWP::UserAgent->new;
my($req) = HTTP::Request->new(
	GET => $main::URL_JSON
);

# Pass request to the user agent and get a response.
my($resp) = $ua->request($req);

# Check the outcome of the response.
$main::json_service_log = "";
if ($resp->is_success)
{
	$main::json_service_log = $resp->content;
}
else
{
	print "Error reading service statuslog - ".$resp->status_line."\n";
	exit;
}

#$main::json_service_log = `cat /Users/mcp/system_status_en_US.js.issue.json`;

# Decode JSON into a hash, converting any UTF-8 characters in the process.
$main::EVENTLOG = decode_json $main::json_service_log;
#print Dumper $main::EVENTLOG; exit;

#
# ::EVENTLOG is a hash that contains two keys used by this test:
#
# dashboard->services - a hash arrays with the key being the service name and the 
#                       value being an array of hashes containing metadata regarding
#                       the current status.
#
# detailedTimeline - an array of hashes containing previous events for the last N days.
#                    (I believe N is 3, but not confirmed.)
#

#
# Process each service; send status update.
#
foreach my $service (keys %{$main::EVENTLOG->{dashboard}->{Services}}, "Timeline")
{
	my($TESTNAME) = $service;
	my($status) = "OK";
	my($COLOR) = "clear";
	my($message) = "";
	my($eventlog) = "";

	# Reset vars to defaults.
	&Xymon::init_xymon_namespace;

	# Host this test is reporting for as defined in hosts.cfg.
	&Xymon::set_machinename("www,apple,com");

	# Munge test names to deal with problematic characters.
	$TESTNAME =~ s/[\(\)]//go;
	$TESTNAME =~ s/\s/_/go;
	$TESTNAME =~ s/\./,/go;
	$TESTNAME =~ s/\&/and/go;
	
	if ($service ne "Timeline" &&
	    scalar(@{$main::EVENTLOG->{dashboard}->{Services}->{$service}}) != 0)
	{
		#
		# Process service events
		#
		foreach my $item (@{$main::EVENTLOG->{dashboard}->{Services}->{$service}})
		{
			$status = $item->{statusType};
			$status =~ s/([a-z]+)([A-Z])/$1 $2/g;
			#foreach my $key (keys %{$item}) {
			#	print "\t'$key'='$item->{$key}'\n";
			#}

			if ($status eq "Maintenance" ||
			    $status eq "Service Issue")
			{
				&Xymon::set_testcolor("yellow");
			}
			elsif ($status eq "Service Outage")
			{
				&Xymon::set_testcolor("red");
			}
			else
			{
				&Xymon::set_testcolor("yellow");
			}

			$eventlog = sprintf("===== %s - %s =====\n".
			                    "Posted: %s\n".
			                    "  Type: %s\n".
			                    " Issue: %s\n\n",
			                    $item->{messageTitle}, $item->{usersAffected},
			                    $item->{datePosted},
			                    $status,
			                    $item->{shortMessage},
			);
		}
	}
	else
	{
		#
		# No event data for this service.
		#
		&Xymon::set_testcolor("green") unless ($service eq "Timeline");
	}

	&Xymon::set_summary($status);
	&Xymon::set_testname($TESTNAME);

	if ($service ne "Timeline")
	{
		$message .= sprintf("%s: %s &%s\n", $service, $status, &Xymon::get_testcolor());
	}
	$message .= "\n";

	if ($eventlog ne "")
	{
		$message .= "${eventlog}\n";
	}

	#
	# Check detailed timeline message titles for entries matching current
	# service title and append timeline entry to service information page.
	#
	my($timeline_header) = 0;
	foreach my $event (@{$main::EVENTLOG->{detailedTimeline}})
	{
		if ($service eq "Timeline" || $event->{messageTitle} =~ /^${service}/i)
		{
			if ($timeline_header == 0)
			{
				my($TimelineName) = ($service eq "Timeline" ? "All Services" : $service);
				
				$timeline_header = 1;
				$message .= "<<<< Detailed Service Timeline: $TimelineName >>>>\n\n";
			}
			$event->{message} =~ s/^\s*//;
			my($status) = $event->{statusType};
			$status =~ s/([a-z]+)([A-Z])/$1 $2/g;

			my($entry) = sprintf("===== %s - %s [%s] =====\n".
			                     "Posted: %s\n".
			                     "  Type: %s\n".
			                     "  Date: %s - %s\n".
			                     " Issue: %s\n\n",
		        	         $event->{messageTitle}, $event->{usersAffected},
			                 ($event->{endDate} !~ /^\s*$/) ? "resolved" : "open",
			                 $event->{datePosted},
			                 $status,
			                 $event->{startDate}, $event->{endDate},
			                 wrap("", "        ", $event->{message})
			);
			$message .= $entry;
		}
	}

	$message .= "Source: <A HREF=\"${main::URL}\">${main::URL}</a>\n";

	#
	# == Report findings ==
	#
	# Note send_status() takes a hash of arguments; it's like varargs for perl. :)
	# Arguments are:
	#
	#   "lifetime" - lifetime of the report.
	#   "group"    - reporing group
	#   "hostname" - name of machine we report as
	#   "testname" - name of test
	#   "color"    - canonical test color to report
	#   "message"  - the body of the rest report (diagnostic information)
	#   "summary"  - brief text shown on first line after date and test name
	#

	&Xymon::send_status(
		"message"  => $message,
	);
}

exit;

#============================================================================
#
# Xymon package starts here
#
#============================================================================
package Xymon;

sub init_xymon_namespace
#
# Initialize variables in the Xymon namespace
#
{
	%Xymon::COLOR_PRIORITY = (
		'red'    => 4,
		'yellow' => 3,
		'green'  => 2,
		'clear'  => 1
	);

	$Xymon::TESTNAME        = "default-test";
	$Xymon::MACHINE         = $ENV{MACHINE};
	$Xymon::SUMMARY         = "";
	$Xymon::COLOR           = "clear";

	1;
}

sub send_status
#
# Send a status update to the Xymon display server.
#
# usage: send_status(%validargs)
#	
{
	#
	# Valid arguments (named same as xymon(1) manpage).
	#
	my %validargs = (
		"lifetime"  => 1,
		"group"     => 1,
		"hostname"  => 1,
		"testname"  => 1,
		"color"     => 1,
		"message"   => 1,
		"summary"   => 1,
	);

	my %args = @_;

	#
	# Validate passed arguments; warn if invalid.
	#
	foreach my $key (keys %args)
	{
		if (! defined($validargs{$key}))
		{
			print STDERR "${main::PROGRAM_NAME}: in send_staus(): ".
			             "invalid argument $key\n";
		}
	}

	my($LIFETIME)  = exists $args{lifetime}
	                 ? "+$args{lifetime}" : "";
	my($GROUP)     = exists $args{group}
	                 ? "/group:$args{group}" : "";
	my($TESTNAME)  = exists $args{testname}
	                 ? $args{testname}
	                 : &Xymon::get_testname;
	my($COLOR)     = exists $args{color}
	                 ? $args{color}
	                 : &Xymon::get_testcolor;
	my($MACHINE)   = exists $args{hostname}
	                 ? $args{hostname}
	                 : &Xymon::get_machinename;
	my($DIAGINFO)  = exists $args{message}
	                 ? $args{message}
	                 : "";
	my($SUMMARY)   = exists $args{summary}
	                 ? $args{summary}
	                 : &Xymon::get_summary;

	my($MESSAGE)   = sprintf("status%s%s %s.%s %s %s - %s: %s\n%s",
		$LIFETIME, $GROUP, $MACHINE, $TESTNAME, $COLOR,
		scalar(localtime(time)), $TESTNAME, $SUMMARY, $DIAGINFO);

	#
	# Send to Xymon or to stdout if run interactively.
	#
	if (defined($ENV{XYMON}))
	{
		# "at" sign as argument means "read message data from 
		# stdin". DON'T USE A DASH AS THE xymon USAGE MESSAGE 
		# SHOWS ELSE ONLY THE SUMMARY INFORMATION IS DISPLAYED 
		# AND NONE OF ${DATA}. THE MANPAGE USAGE OF "@" IS 
		# CORRECT.

		my($cmd) = "$ENV{XYMON} $ENV{XYMSRV} @";
		open(XYMON, "| ${cmd}") || do
		{
			print "Error invoking ${cmd} - $!";
			exit;
		};
		select(XYMON);
	}
	else
	{
		print STDERR "*** Not invoked by Xymon; ".
		             "sending to stdout ***\n\n";
	}

	print $MESSAGE;
	close(XYMON);
}

sub set_testcolor
#
# Set the canonical test color. Returns the canonical test color.
#
{
	my($new_testcolor) = shift(@_);

	if (! defined($Xymon::COLOR_PRIORITY{$new_testcolor}))
	{
		return &Xymon::get_testcolor;
	}	
	
	if ($Xymon::COLOR_PRIORITY{$Xymon::COLOR} <
	    $Xymon::COLOR_PRIORITY{$new_testcolor})
	{
		$Xymon::COLOR = $new_testcolor;
	}

	return &Xymon::get_testcolor;
}

sub get_testcolor
#
# Returns the canonical test color.
#
{
	return $Xymon::COLOR;
}	    

sub set_summary
#
# Set the status summary text.
#
{
	$Xymon::SUMMARY = shift(@_);
}

sub get_summary
#
# Returns the status summary color.
#
{
	my($SUMMARY) = $Xymon::SUMMARY;

	if ($SUMMARY =~ /^\s*$/o)
	{
		if ($Xymon::COLOR_PRIORITY{$Xymon::COLOR} >
		    $Xymon::COLOR_PRIORITY{"green"})
		{
			$SUMMARY = "NOT OK";
		}
		else
		{
			$SUMMARY = "OK";
		}
	}

	return $SUMMARY;
}

sub set_testname
#
# Set the test name.
#
{
	$Xymon::TESTNAME = shift(@_);
}

sub get_testname
#
# Returns the test name.
#
{
	return $Xymon::TESTNAME;
}

sub set_machinename
#
# Set the test name.
#
{
	$Xymon::MACHINE = shift(@_);
}

sub get_machinename
#
# Returns the test name.
#
{
	my($MACHINE) = $Xymon::MACHINE;
	if ($MACHINE =~ /^\s*$/)
	{
		$MACHINE = "dummy,example,com";
	}

	return $MACHINE;
}

#===========================================================================

__DATA__
{"redirectUrl":null,"dashboard":{"Services":{"App Store":[],"Apple ID":[],"Apple Online Store":[],"Apple Pay":[],"Apple TV":[],"Back to My Mac":[],"Beats Music":[],"Dictation":[],"Documents in the Cloud":[],"FaceTime":[],"Find My Friends":[],"Find My iPhone, iPad, iPod touch, and Mac":[],"Game Center":[],"iBooks Store":[],"iChat":[],"iCloud Account & Sign In":[],"iCloud Backup":[],"iCloud Bookmarks & Tabs":[],"iCloud Calendar":[],"iCloud Contacts":[],"iCloud Drive":[],"iCloud Keychain":[],"iCloud Mail":[],"iCloud Notes":[],"iCloud Reminders":[],"iCloud Storage Upgrades":[],"iCloud Web Apps (iCloud.com)":[],"iMessage":[],"iMovie Theater":[],"iOS Device Activation":[],"iPhone Calls to iPad and Mac":[],"iTunes in the Cloud":[],"iTunes Match":[],"iTunes Radio":[],"iTunes Store":[],"iTunes U":[],"iWork for iCloud beta":[],"Mac App Store":[],"Mail Drop":[],"Maps":[],"Photo Print Products":[],"Photos":[],"Siri":[],"SMS Text Forwarding":[],"Spotlight suggestions":[]}},"detailedTimeline":[{"message":" Users were unable to access iCloud Mail or iCloud Notes. ","usersAffectedPercent":0.023,"usersAffected":"0.023% of users were affected","messageId":"1006","statusType":"ServiceOutage","messageTitle":"Multiple iCloud Services","datePosted":"02/10/2015 09:31 PST","messageBodyDates":{"_expectedResolution_":null,"_nextUpdate_":null},"messageUUID":"1017-10085-2086","epochStartDate":1423345500000,"epochEndDate":1423348080000,"startDate":"02/07/2015 13:45 PST","endDate":"02/07/2015 14:28 PST"}]}

         'detailedTimeline' => [
                                  {
                                    'message' => ' Users were unable to access iCloud Mail or iCloud Notes. ',
                                    'endDate' => '02/07/2015 14:28 PST',
                                    'messageUUID' => '1017-10085-2086',
                                    'usersAffectedPercent' => '0.023',
                                    'epochEndDate' => '1423348080000',
                                    'epochStartDate' => '1423345500000',
                                    'usersAffected' => '0.023% of users were affected',
                                    'messageId' => '1006',
                                    'messageTitle' => 'Multiple iCloud Services',
                                    'startDate' => '02/07/2015 13:45 PST',
                                    'datePosted' => '02/10/2015 09:31 PST',
                                    'messageBodyDates' => {
                                                            '_nextUpdate_' => undef,
                                                            '_expectedResolution_' => undef
                                                          },
                                    'statusType' => 'ServiceOutage'
                                  }
                                ]
        };
