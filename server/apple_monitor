#!/usr/bin/perl
#
# apple_monitor - report status of Apple's services.
#
# Jason White <jdwhite@menelos.com>
# 8-Feb-2014
#
# Requires phantomjs (http://phantomjs.org) to render javascript and
# produce HTML.  Also be sure to save the following as 'dumpurl.js':
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Created with 'uuencode -m ...'. Decode with uudecode.
#
=dumpurl.js.uue
begin-base64 644 dumpurl.js
Ly8KLy8gZHVtcHVybC5qcyAtIGZldGNoLCByZW5kZXIsIGFuZCBkdW1wIEhUTUwgdG8gc3Rkb3V0
Ci8vCi8vIEphc29uIFdoaXRlCi8vIDExLUZlYi0yMDE0Ci8vCnZhciBwYWdlID0gbmV3IFdlYlBh
Z2UoKSwgYWRkcmVzczsKCmlmIChwaGFudG9tLmFyZ3MubGVuZ3RoID09PSAwKSB7CiAgICBjb25z
b2xlLmxvZygnVXNhZ2U6IGR1bXB1cmwuanMge1VSTH0nKTsKICAgIHBoYW50b20uZXhpdCgpOwp9
CgovLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE2ODU0Nzg4L3BoYW50b21q
cy13ZWJwYWdlLXRpbWVvdXQKcGFnZS5zZXR0aW5ncy5yZXNvdXJjZVRpbWVvdXQgPSAxMDAwMDsg
Ly8gMTAgc2Vjb25kcwpwYWdlLm9uUmVzb3VyY2VUaW1lb3V0ID0gZnVuY3Rpb24oZSkgewogIGNv
bnNvbGUubG9nKGUuZXJyb3JDb2RlKTsgICAvLyBpdCdsbCBwcm9iYWJseSBiZSA0MDgKICBjb25z
b2xlLmxvZyhlLmVycm9yU3RyaW5nKTsgLy8gaXQnbGwgcHJvYmFibHkgYmUgJ05ldHdvcmsgdGlt
ZW91dCBvbiByZXNvdXJjZScKICBjb25zb2xlLmxvZyhlLnVybCk7ICAgICAgICAgLy8gdGhlIHVy
bCB3aG9zZSByZXF1ZXN0IHRpbWVkIG91dAogIHBoYW50b20uZXhpdCgxKTsKfTsKCmFkZHJlc3Mg
PSBlbmNvZGVVUkkocGhhbnRvbS5hcmdzWzBdKTsKcGFnZS5vcGVuKGFkZHJlc3MsIGZ1bmN0aW9u
IChzdGF0dXMpIHsKICAgIC8vY29uc29sZS5sb2coImluc2lkZSBwYWdlLm9wZW4oKSIpOwogICAg
aWYgKHN0YXR1cyAhPT0gJ3N1Y2Nlc3MnKSB7CiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0
byBsb2FkJywgYWRkcmVzcyk7CglwaGFudG9tLmV4aXQoKTsKICAgIH0KICAgIHdpbmRvdy5zZXRU
aW1lb3V0KGZ1bmN0aW9uKCkgewoJY29uc29sZS5sb2cocGFnZS5jb250ZW50KTsKCXBoYW50b20u
ZXhpdCgpOwogICAgfSwgNDAwMCk7Cn0pOwo=
====
=cut

#
# MD5 (dumpurl.js) = f0484f9995006c7daa60cc3ffdb1403b
#
=dumpurl.js
//
// dumpurl.js - fetch, render, and dump HTML to stdout
//
// Jason White
// 11-Feb-2014
//
var page = new WebPage(), address;

if (phantom.args.length === 0) {
    console.log('Usage: dumpurl.js {URL}');
    phantom.exit();
}

// http://stackoverflow.com/questions/16854788/phantomjs-webpage-timeout
page.settings.resourceTimeout = 10000; // 10 seconds
page.onResourceTimeout = function(e) {
  console.log(e.errorCode);   // it'll probably be 408
  console.log(e.errorString); // it'll probably be 'Network timeout on resource'
  console.log(e.url);         // the url whose request timed out
  phantom.exit(1);
};

address = encodeURI(phantom.args[0]);
page.open(address, function (status) {
    //console.log("inside page.open()");
    if (status !== 'success') {
        console.log('Failed to load', address);
	phantom.exit();
    }
    window.setTimeout(function() {
	console.log(page.content);
	phantom.exit();
    }, 4000);
});
=cut

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Install in $XYMONCLIENTHOME/client/ext/.
# Modify $XYMONCLIENTHOME/etc/clientlaunch.cfg and add this block:
#
#   # Apple Monitor
#   [applemon]
#           ENABLED
#           ENVFILE $XYMONCLIENTHOME/etc/xymonclient.cfg
#           CMD $XYMONCLIENTHOME/ext/apple_monitor
#           LOGFILE $XYMONCLIENTHOME/logs/apple_monitor.log
#           INTERVAL 10m
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# The apple status page currently contains 36 Services. Since displaying
# all 36 columns in a single host woule be visually disturbing, they
# have been divided into Store, iCloud, and (as a default) Services, with
# each group being assigned a host name.
#
# I recommend using real, resolvable host names for each category so the 
# conn test works.  This will keep Xymon from generating a ton of alerts 
# in the event of transient network outages.
#
# hosts.cfg
# ---------
# group
# 0.0.0.0         store.apple.com                 # conn NAME:"Apple Stores"
#
# group
# 0.0.0.0         www.apple.com                   # conn NAME:"Apple Services"
#
# group
# 0.0.0.0         www.icloud.com                  # conn NAME:"Apple iCloud"
#
=license
The MIT License (MIT)

Copyright (c) 2014 Jason White <jdwhite@menelos.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
=cut
#

use strict;
use warnings;
use Data::Dumper;

## Globals ##
$::PHANTOMJS	= "/usr/local/bin/phantomjs";
$::DUMPURLJS	= "/Users/admin/libexec/dumpurl.js";
$::URL		= "http://www.apple.com/support/systemstatus/";

# ::MACHINE/DOTS - host this test is reporting for as defined in hosts.cfg.
#$::MACHINE	= $ENV{MACHINE};
#$::MACHINE	= "apple";

%::SERVICEGROUP2MACHINE = (
	'iCloud'	=> "www,icloud,com",
	'Stores'	=> "store,apple,com",
	'Services'	=> "www,apple,com"
);

#
# Use phamtomjs to grab, render, and dump html to stdout.
#
my($page_blob);
open(HTML, "$::PHANTOMJS --debug=no $::DUMPURLJS $::URL |") || die "$!";
while(<HTML>) {
	chomp;
	$page_blob .= $_;
}
close(HTML);

# Trim the fat so there's less to parse.
$page_blob =~ s/^.+(<div\s+role=\"main\"\s+id=\"dashboard\".+?<\/div>).+$/$1/i;

#print Dumper $page_blob; exit;

#
# Process each service category (currently "Services", "Store", and "iCloud")
#
while ($page_blob =~ /<table>(.+?)<\/table>/ig) {
	my($table) = $1;
	$table =~ s/\&amp;/\&/goi;

	#
	# Process each service within a category.
	#
	while ($table =~ /<td.*?<span\s+class=\"([^\"]+)\".+?class=\"matrix_p"\s+alt=\"([^\"]+)\".*?<p class=\"affected_p\">(.*?)<\/p><\/td>/ig) {
		my($status) = $1;
		my($TESTNAME) = $2;
		my($affected) = $3;
		my($COLOR) = "clear";
		#my($DATA) = "=" x length($servgroup)."\n${servgroup}\n"."=" x length($servgroup)."\n\n";
		my($DATA) = "";
		my($service) = $TESTNAME;
		my($servgroup) = "";

		# Determine service group: iCloud, Services, or Stores
		# and mangle test names.
		if ($service =~ /Store$/io) {
			$servgroup = "Stores";
			$TESTNAME =~ s/Store$//;
		}
		elsif ($service =~ /^iCloud /io ||
		       $service =~ /in the Cloud/io) {
			$servgroup = "iCloud";
			$TESTNAME =~ s/^iCloud\s+//io;
			$TESTNAME =~ s/in the Cloud//i;
			$TESTNAME =~ s/^Account \& Sign In/Account,SignIn/io;
			$TESTNAME =~ s/^Web Apps \(iCloud\.com\)/iCloudDotCom/io;
			$TESTNAME =~ s/^Bookmarks \& Tabs.*/Bookmarks,Tabs/io;
		}
		else {
			$servgroup = "Services";
			$TESTNAME =~ s/for iCloud\s+//io;
			$TESTNAME =~ s/iOS Device Activation/iOS Dev Act/;
			$TESTNAME =~ s/^Find My iPhone.+$/Find My Devices/io;
		}

		my($MACHINE) = $::SERVICEGROUP2MACHINE{$servgroup};

		#print STDERR "machine: $MACHINE, servgroup=$servgroup\n";


		# Mangle into Xymon test names.
		if ($servgroup eq "Services") {
		} elsif ($servgroup eq "Stores") {
		} elsif ($servgroup eq "iCloud") {
		}

		# Zorch whitespace and convert status to something more terse.
		$TESTNAME =~ s/\s+//g;
		$status =~ s/allgood/OK/io;

		my($line_color) = "";
		if ($status eq "OK") {
			$COLOR = "green";
		} else {
			$COLOR = "yellow";
		}

		$DATA .= sprintf("%s: %s &%s\n\n", $service, $status, $COLOR);

		if ($affected !~ /^\s*$/o) {
			$DATA .= "${affected}\n\n";
		}

		$DATA .= "Source: <A HREF=\"${main::URL}\">${main::URL}</a>\n";

		##
		## Generate status report
		##

		# STATUS - Canonical status of test and its lifetime:
		#		 status[+LIFETIME]
		#$STATUS = "status+25h ${::MACHINE}.${::TESTNAME} ${::COLOR}";
		my $STATUS = "status ${MACHINE}.${TESTNAME} ${COLOR}";

		# SUMMARY - datestamp and summary of the test.
		my $SUMMARY = scalar(localtime(time))." - ${service}: $status";

		my $MESSAGE = "${STATUS} ${SUMMARY}\n\n${DATA}";

		#
		# Send to Xymon or to stdout if run interactively.
		#
		if (defined($ENV{XYMON})) {
		        # "at" sign as argument means "read message data 
		        # from stdin". DON'T USE A DASH AS THE xymon 
		        # USAGE MESSAGE SHOWS ELSE ONLY THE SUMMARY 
		        # INFORMATION IS DISPLAYED AND NONE OF $DATA. 
		        # THE MANPAGE USAGE OF "@" IS CORRECT.

		        open(XYMON, "| $ENV{XYMON} $ENV{XYMSRV} @") || do {
		                print "Error invoking $ENV{XYMON} $ENV{XYMSRV} @ - $!";
		                exit;
		        };
		        select(XYMON);
		} else {
		        print STDERR "*** Not invoked by Xymon; spewing to stdout ***\n\n";
		}

		print $MESSAGE;
		close(XYMON);
	}
}

exit;
